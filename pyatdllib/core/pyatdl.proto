syntax = "proto2";

package pyatdl;

// The value for our Django cookie.
message VisitorInfo0 {
  // If we deserialize and find an invalid sanity_check, then, er, insanity.
  optional int32 sanity_check = 1;
  optional int64 cwc_uid = 7 [jstype = JS_STRING];  // CurrentWorkingContainer, see 'help cd'
  optional string view = 3;  // See 'help view'
  optional string sort = 5 [default = "alpha"];  // See 'help sort'
  optional bytes username_hash = 6;
  extensions 20000 to max;
}

// The input to the mergeprotobufs API.
//
// If you have made changes, pass in a `ToDoList` as `latest.payload`. If you
// deserialize and reserialize without making changes, it could change the SHA1
// checksum, so you probably want to keep track of whether you made changes so
// you can avoid passing in something that's the-same-but-different and
// triggering the merging algorithm which costs time and memory.
//
// If you previously called mergeprotobufs to obtain a to-do list, set
// `previous_sha1_checksum` to be the SHA1 checksum of that list (from
// `MergeToDoListResponse.sha1_checksum`). Do this regardless of whether or not
// you set `latest`.
//
// TODO(chandler37): test future data passed in is preserved: e.g., `message
// ToDoList { optional Foo foo = 6; }; message Foo { optional bool new_field =
// 1; }`
message MergeToDoListRequest {
  // We could include a ToDoList, but the mergeprotobufs API never needs to
  // decode latest.payload (which takes time and memory) if your application is
  // the only one that has modified the user's to-do list (that is, if
  // previous_sha1_checksum still describes the most recent version of the
  // user's to-do list):
  optional ChecksumAndData latest = 16;  // where payload_is_zlib_compressed
                                         // must be false (use HTTP compression
                                         // if you care)

  // What version of the uncompressed ToDoList did you start with? Optional
  // when and only when new_data is true:
  optional string previous_sha1_checksum = 2;

  // You registered this user and you created a starter to-do list for them and
  // you're saving it for the first time to the database:
  optional bool new_data = 3 [default = false];

  // In the special case of an App that does not share well with other Apps and
  // instead is the only writer, set this to true and we will overwrite the
  // contents of the database (if any exist). This is an expedient (hacky hack
  // hack hack) until merging is implemented.
  optional bool overwrite_instead_of_merge = 4 [default = false];

  // If you are an App that knows you are alone in the Immaculater universe for
  // this User, then a merge should never be required. This aborts if it is,
  // instead of merging:
  optional bool abort_if_merge_is_required = 5 [default = false];

  optional fixed64 sanity_check = 15 [jstype = JS_STRING];  // Must be 18369614221190020847
}

// The output from the mergeprotobufs API on its HTTP 200 OK happy path:
message MergeToDoListResponse {
  // Note that we do not use zlib compression or provide you with a bunch of
  // bytes and a checksum. HTTP is atop TCP which has TCP checksums. HTTP (even
  // with TLS) supports compression. So ChecksumAndData is not needed. (Okay,
  // fine -- the sanity_check field proves that we trust nothing and no one :)

  // Always present. This will be equal to the sha1_checksum you provided when
  // to_do_list is absent:
  optional string sha1_checksum = 1;
  optional ToDoList to_do_list = 2;  // present iff the merge operation actually did something
  optional bool starter_template = 3 [default = false];  // Is to_do_list the to-do list stamped out for a new user?
  optional fixed64 sanity_check = 15 [jstype = JS_STRING];  // Must be 18369614221190021342
}

// When we serialize ToDoList, we do so using ChecksumAndData. This way we can
// detect data corruption.
message ChecksumAndData {
  required int64 payload_length = 1 [jstype = JS_STRING];  // in bytes
  // TODO(chandler37): why sha1? why not a faster noncryptographic hash or
  // pseudorandom function (PRF)?  do we need a cryptographic hash (given that
  // only the User can modify their data)? why not sha-3 or at least sha-256?
  // SipHash? HighwayHash?
  optional string sha1_checksum = 2;
  optional bool payload_is_zlib_compressed = 3;
  required bytes payload = 10123;
  extensions 20000 to max;
}

// Useful for saving a to-do list to local storage for an application that has
// a notion of identity, personas, separate from the Django classic web app's
// notion of identity.
message UserInfoAndToDoList {
  optional string persona_name = 1;  // for the other application
  optional string username = 2;  // for the Django web app
  optional string json_web_token = 3;  // for the Django web app
  optional ChecksumAndData checksum_and_data = 10123;
}

message Timestamp {
  optional int64 ctime = 1 [jstype = JS_STRING];
  optional int64 dtime = 2 [jstype = JS_STRING];
  optional int64 mtime = 3 [jstype = JS_STRING];
}

// A better name might be "Description":
message Metadata {
  optional string name = 1;
  optional string note = 2;
  extensions 20000 to max;
}

// Fields common to Action, Project, Context, etc.
message Common {
  // UID = "Unique IDentifier". Two things that have the same name are
  // distinguished by UID. In ancient history we used small, positive (nonzero)
  // integers, and for our unittests' readability we still do that in almost
  // all the tests. Supporting multiple devices, some of which are typically
  // offline, is tricky if you count 1,2,3,... "I see a new action 123 from one
  // device and a new action 123 from another device -- what do I do?"
  //
  // So instead we choose UIDs from a 64-bit space at random, choosing again
  // and again until we are free from collisions with existing UIDs.
  //
  // If we had done this from the beginning, we would have picked fixed64
  // instead of int64 because of the savings in space on the wire and because
  // negative numbers are less fun. Of course we could change to a new fixed64
  // field, but changing a protocol used by mulitple devices and codebases is
  // cumbersome. Even without multiple devices you'd have to leave in the old
  // field and deal with it forever or else you'd risk breaking people's saved
  // backup files. If you have both fields, you're more likely to have bugs
  // when the wrong one is used.
  //
  // MAYBE(chandler37): Change the protobuf to use sfixed64 or fixed64 to save
  // some bytes relative to int64, which is ten bytes long for negative
  // numbers, which we see about one half of the time, and needlessly large for
  // numbers > 2**56, which we see about half of the time.
  //
  // Without UIDs, how would you delete a Project in a multi-device world? With
  // UIDs available, you leave the Project in place, delete most of its
  // metadata like the fact that it was "Buy a new car", and flip the
  // is_deleted bit. The `mergeprotobufs` API will then delete it from both
  // places and remove the Project message.

  // Below, `jstype` is because javascript has only one numeric type and it is
  // floating point and therefore unable to represent all UIDs in our
  // range. See
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER
  optional int64 uid = 4 [jstype = JS_STRING];
  optional bool is_deleted = 1;
  optional Timestamp timestamp = 2;
  optional Metadata metadata = 3;
  extensions 20000 to max;
}

message Context {
  optional Common common = 1;
  optional bool is_active = 2;
  extensions 20000 to max;
}

message Action {
  reserved 4;  // obsolete optional Context ctx
  optional Common common = 1;
  optional bool is_complete = 3;
  optional int64 ctx_uid = 5 [jstype = JS_STRING];
  extensions 20000 to max;
}

message Project {
  optional Common common = 1;
  optional bool is_complete = 2;
  optional bool is_active = 3;
  repeated Action actions = 4;
  optional float max_seconds_before_review = 5;
  optional float last_review_epoch_seconds = 6;  // seconds since the epoch

  // 0 means no default. uid=0 conventionally refers to Actions Without Context:
  optional int64 default_context_uid = 7 [default = 0, jstype = JS_STRING];

  extensions 20000 to max;
}

message Note {
  // Names matching the regexp r'^:__.*' are reserved for the Django UI. Names
  // must be unique.
  optional string name = 1;
  optional string note = 2;
  extensions 20000 to max;
}

message NoteList {
  repeated Note notes = 2;
  extensions 20000 to max;
}

message ContextList {
  optional Common common = 1;
  repeated Context contexts = 2;
  extensions 20000 to max;
}

message Folder {
  optional Common common = 1;
  repeated Folder folders = 2;
  repeated Project projects = 3;
  extensions 20000 to max;
}

message ToDoList {
  // Before we set UIDs at random this helped find a few bugs; we don't read or
  // write it these days:
  reserved 4;  // obsolete optional bool has_never_purged_deleted

  optional Project inbox = 1;
  optional Folder root = 2;
  optional ContextList ctx_list = 3;
  optional NoteList note_list = 5;

  // TODO(chandler37): keep counters of objects: {actions: {created: 100,
  // completed: 90, deleted: 5}, projects: {created: 25,
  // completed: 10, deleted: 1}}
  extensions 20000 to max;
}
