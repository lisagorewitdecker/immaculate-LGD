// source: core/pyatdl.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.pyatdl.Action', null, global);
goog.exportSymbol('proto.pyatdl.ChecksumAndData', null, global);
goog.exportSymbol('proto.pyatdl.Common', null, global);
goog.exportSymbol('proto.pyatdl.Context', null, global);
goog.exportSymbol('proto.pyatdl.ContextList', null, global);
goog.exportSymbol('proto.pyatdl.Folder', null, global);
goog.exportSymbol('proto.pyatdl.MergeToDoListRequest', null, global);
goog.exportSymbol('proto.pyatdl.MergeToDoListResponse', null, global);
goog.exportSymbol('proto.pyatdl.Metadata', null, global);
goog.exportSymbol('proto.pyatdl.Note', null, global);
goog.exportSymbol('proto.pyatdl.NoteList', null, global);
goog.exportSymbol('proto.pyatdl.Project', null, global);
goog.exportSymbol('proto.pyatdl.Timestamp', null, global);
goog.exportSymbol('proto.pyatdl.ToDoList', null, global);
goog.exportSymbol('proto.pyatdl.UserInfoAndToDoList', null, global);
goog.exportSymbol('proto.pyatdl.VisitorInfo0', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pyatdl.VisitorInfo0 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 8, null, null);
};
goog.inherits(proto.pyatdl.VisitorInfo0, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pyatdl.VisitorInfo0.displayName = 'proto.pyatdl.VisitorInfo0';
}

/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldInfo>}
 */
proto.pyatdl.VisitorInfo0.extensions = {};


/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldBinaryInfo>}
 */
proto.pyatdl.VisitorInfo0.extensionsBinary = {};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pyatdl.MergeToDoListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pyatdl.MergeToDoListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pyatdl.MergeToDoListRequest.displayName = 'proto.pyatdl.MergeToDoListRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pyatdl.MergeToDoListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pyatdl.MergeToDoListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pyatdl.MergeToDoListResponse.displayName = 'proto.pyatdl.MergeToDoListResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pyatdl.ChecksumAndData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, null);
};
goog.inherits(proto.pyatdl.ChecksumAndData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pyatdl.ChecksumAndData.displayName = 'proto.pyatdl.ChecksumAndData';
}

/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldInfo>}
 */
proto.pyatdl.ChecksumAndData.extensions = {};


/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldBinaryInfo>}
 */
proto.pyatdl.ChecksumAndData.extensionsBinary = {};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pyatdl.UserInfoAndToDoList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, null);
};
goog.inherits(proto.pyatdl.UserInfoAndToDoList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pyatdl.UserInfoAndToDoList.displayName = 'proto.pyatdl.UserInfoAndToDoList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pyatdl.Timestamp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pyatdl.Timestamp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pyatdl.Timestamp.displayName = 'proto.pyatdl.Timestamp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pyatdl.Metadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 3, null, null);
};
goog.inherits(proto.pyatdl.Metadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pyatdl.Metadata.displayName = 'proto.pyatdl.Metadata';
}

/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldInfo>}
 */
proto.pyatdl.Metadata.extensions = {};


/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldBinaryInfo>}
 */
proto.pyatdl.Metadata.extensionsBinary = {};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pyatdl.Common = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 5, null, null);
};
goog.inherits(proto.pyatdl.Common, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pyatdl.Common.displayName = 'proto.pyatdl.Common';
}

/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldInfo>}
 */
proto.pyatdl.Common.extensions = {};


/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldBinaryInfo>}
 */
proto.pyatdl.Common.extensionsBinary = {};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pyatdl.Context = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 3, null, null);
};
goog.inherits(proto.pyatdl.Context, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pyatdl.Context.displayName = 'proto.pyatdl.Context';
}

/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldInfo>}
 */
proto.pyatdl.Context.extensions = {};


/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldBinaryInfo>}
 */
proto.pyatdl.Context.extensionsBinary = {};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pyatdl.Action = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 6, null, null);
};
goog.inherits(proto.pyatdl.Action, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pyatdl.Action.displayName = 'proto.pyatdl.Action';
}

/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldInfo>}
 */
proto.pyatdl.Action.extensions = {};


/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldBinaryInfo>}
 */
proto.pyatdl.Action.extensionsBinary = {};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pyatdl.Project = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 8, proto.pyatdl.Project.repeatedFields_, null);
};
goog.inherits(proto.pyatdl.Project, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pyatdl.Project.displayName = 'proto.pyatdl.Project';
}

/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldInfo>}
 */
proto.pyatdl.Project.extensions = {};


/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldBinaryInfo>}
 */
proto.pyatdl.Project.extensionsBinary = {};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pyatdl.Note = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 3, null, null);
};
goog.inherits(proto.pyatdl.Note, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pyatdl.Note.displayName = 'proto.pyatdl.Note';
}

/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldInfo>}
 */
proto.pyatdl.Note.extensions = {};


/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldBinaryInfo>}
 */
proto.pyatdl.Note.extensionsBinary = {};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pyatdl.NoteList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 3, proto.pyatdl.NoteList.repeatedFields_, null);
};
goog.inherits(proto.pyatdl.NoteList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pyatdl.NoteList.displayName = 'proto.pyatdl.NoteList';
}

/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldInfo>}
 */
proto.pyatdl.NoteList.extensions = {};


/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldBinaryInfo>}
 */
proto.pyatdl.NoteList.extensionsBinary = {};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pyatdl.ContextList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 3, proto.pyatdl.ContextList.repeatedFields_, null);
};
goog.inherits(proto.pyatdl.ContextList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pyatdl.ContextList.displayName = 'proto.pyatdl.ContextList';
}

/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldInfo>}
 */
proto.pyatdl.ContextList.extensions = {};


/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldBinaryInfo>}
 */
proto.pyatdl.ContextList.extensionsBinary = {};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pyatdl.Folder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 4, proto.pyatdl.Folder.repeatedFields_, null);
};
goog.inherits(proto.pyatdl.Folder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pyatdl.Folder.displayName = 'proto.pyatdl.Folder';
}

/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldInfo>}
 */
proto.pyatdl.Folder.extensions = {};


/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldBinaryInfo>}
 */
proto.pyatdl.Folder.extensionsBinary = {};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pyatdl.ToDoList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 6, null, null);
};
goog.inherits(proto.pyatdl.ToDoList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pyatdl.ToDoList.displayName = 'proto.pyatdl.ToDoList';
}

/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldInfo>}
 */
proto.pyatdl.ToDoList.extensions = {};


/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldBinaryInfo>}
 */
proto.pyatdl.ToDoList.extensionsBinary = {};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pyatdl.VisitorInfo0.prototype.toObject = function(opt_includeInstance) {
  return proto.pyatdl.VisitorInfo0.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pyatdl.VisitorInfo0} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pyatdl.VisitorInfo0.toObject = function(includeInstance, msg) {
  var f, obj = {
    sanityCheck: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    cwcUid: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    view: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    sort: jspb.Message.getFieldWithDefault(msg, 5, "alpha"),
    usernameHash: msg.getUsernameHash_asB64()
  };

  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,
      proto.pyatdl.VisitorInfo0.extensions, proto.pyatdl.VisitorInfo0.prototype.getExtension,
      includeInstance);
  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pyatdl.VisitorInfo0}
 */
proto.pyatdl.VisitorInfo0.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pyatdl.VisitorInfo0;
  return proto.pyatdl.VisitorInfo0.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pyatdl.VisitorInfo0} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pyatdl.VisitorInfo0}
 */
proto.pyatdl.VisitorInfo0.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSanityCheck(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setCwcUid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setView(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSort(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUsernameHash(value);
      break;
    default:
      jspb.Message.readBinaryExtension(msg, reader,
        proto.pyatdl.VisitorInfo0.extensionsBinary,
        proto.pyatdl.VisitorInfo0.prototype.getExtension,
        proto.pyatdl.VisitorInfo0.prototype.setExtension);
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pyatdl.VisitorInfo0.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pyatdl.VisitorInfo0.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pyatdl.VisitorInfo0} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pyatdl.VisitorInfo0.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt64String(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBytes(
      6,
      f
    );
  }
  jspb.Message.serializeBinaryExtensions(message, writer,
    proto.pyatdl.VisitorInfo0.extensionsBinary, proto.pyatdl.VisitorInfo0.prototype.getExtension);
};


/**
 * optional int32 sanity_check = 1;
 * @return {number}
 */
proto.pyatdl.VisitorInfo0.prototype.getSanityCheck = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pyatdl.VisitorInfo0} returns this
 */
proto.pyatdl.VisitorInfo0.prototype.setSanityCheck = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pyatdl.VisitorInfo0} returns this
 */
proto.pyatdl.VisitorInfo0.prototype.clearSanityCheck = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.VisitorInfo0.prototype.hasSanityCheck = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 cwc_uid = 7;
 * @return {string}
 */
proto.pyatdl.VisitorInfo0.prototype.getCwcUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, "0"));
};


/**
 * @param {string} value
 * @return {!proto.pyatdl.VisitorInfo0} returns this
 */
proto.pyatdl.VisitorInfo0.prototype.setCwcUid = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pyatdl.VisitorInfo0} returns this
 */
proto.pyatdl.VisitorInfo0.prototype.clearCwcUid = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.VisitorInfo0.prototype.hasCwcUid = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string view = 3;
 * @return {string}
 */
proto.pyatdl.VisitorInfo0.prototype.getView = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pyatdl.VisitorInfo0} returns this
 */
proto.pyatdl.VisitorInfo0.prototype.setView = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pyatdl.VisitorInfo0} returns this
 */
proto.pyatdl.VisitorInfo0.prototype.clearView = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.VisitorInfo0.prototype.hasView = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string sort = 5;
 * @return {string}
 */
proto.pyatdl.VisitorInfo0.prototype.getSort = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, "alpha"));
};


/**
 * @param {string} value
 * @return {!proto.pyatdl.VisitorInfo0} returns this
 */
proto.pyatdl.VisitorInfo0.prototype.setSort = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pyatdl.VisitorInfo0} returns this
 */
proto.pyatdl.VisitorInfo0.prototype.clearSort = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.VisitorInfo0.prototype.hasSort = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bytes username_hash = 6;
 * @return {!(string|Uint8Array)}
 */
proto.pyatdl.VisitorInfo0.prototype.getUsernameHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes username_hash = 6;
 * This is a type-conversion wrapper around `getUsernameHash()`
 * @return {string}
 */
proto.pyatdl.VisitorInfo0.prototype.getUsernameHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUsernameHash()));
};


/**
 * optional bytes username_hash = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUsernameHash()`
 * @return {!Uint8Array}
 */
proto.pyatdl.VisitorInfo0.prototype.getUsernameHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUsernameHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.pyatdl.VisitorInfo0} returns this
 */
proto.pyatdl.VisitorInfo0.prototype.setUsernameHash = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pyatdl.VisitorInfo0} returns this
 */
proto.pyatdl.VisitorInfo0.prototype.clearUsernameHash = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.VisitorInfo0.prototype.hasUsernameHash = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pyatdl.MergeToDoListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pyatdl.MergeToDoListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pyatdl.MergeToDoListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pyatdl.MergeToDoListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    latest: (f = msg.getLatest()) && proto.pyatdl.ChecksumAndData.toObject(includeInstance, f),
    previousSha1Checksum: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    newData: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    overwriteInsteadOfMerge: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    abortIfMergeIsRequired: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    sanityCheck: (f = jspb.Message.getField(msg, 15)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pyatdl.MergeToDoListRequest}
 */
proto.pyatdl.MergeToDoListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pyatdl.MergeToDoListRequest;
  return proto.pyatdl.MergeToDoListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pyatdl.MergeToDoListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pyatdl.MergeToDoListRequest}
 */
proto.pyatdl.MergeToDoListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 16:
      var value = new proto.pyatdl.ChecksumAndData;
      reader.readMessage(value,proto.pyatdl.ChecksumAndData.deserializeBinaryFromReader);
      msg.setLatest(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreviousSha1Checksum(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNewData(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOverwriteInsteadOfMerge(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAbortIfMergeIsRequired(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readFixed64String());
      msg.setSanityCheck(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pyatdl.MergeToDoListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pyatdl.MergeToDoListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pyatdl.MergeToDoListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pyatdl.MergeToDoListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLatest();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.pyatdl.ChecksumAndData.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeFixed64String(
      15,
      f
    );
  }
};


/**
 * optional ChecksumAndData latest = 16;
 * @return {?proto.pyatdl.ChecksumAndData}
 */
proto.pyatdl.MergeToDoListRequest.prototype.getLatest = function() {
  return /** @type{?proto.pyatdl.ChecksumAndData} */ (
    jspb.Message.getWrapperField(this, proto.pyatdl.ChecksumAndData, 16));
};


/**
 * @param {?proto.pyatdl.ChecksumAndData|undefined} value
 * @return {!proto.pyatdl.MergeToDoListRequest} returns this
*/
proto.pyatdl.MergeToDoListRequest.prototype.setLatest = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pyatdl.MergeToDoListRequest} returns this
 */
proto.pyatdl.MergeToDoListRequest.prototype.clearLatest = function() {
  return this.setLatest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.MergeToDoListRequest.prototype.hasLatest = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional string previous_sha1_checksum = 2;
 * @return {string}
 */
proto.pyatdl.MergeToDoListRequest.prototype.getPreviousSha1Checksum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pyatdl.MergeToDoListRequest} returns this
 */
proto.pyatdl.MergeToDoListRequest.prototype.setPreviousSha1Checksum = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pyatdl.MergeToDoListRequest} returns this
 */
proto.pyatdl.MergeToDoListRequest.prototype.clearPreviousSha1Checksum = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.MergeToDoListRequest.prototype.hasPreviousSha1Checksum = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool new_data = 3;
 * @return {boolean}
 */
proto.pyatdl.MergeToDoListRequest.prototype.getNewData = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pyatdl.MergeToDoListRequest} returns this
 */
proto.pyatdl.MergeToDoListRequest.prototype.setNewData = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pyatdl.MergeToDoListRequest} returns this
 */
proto.pyatdl.MergeToDoListRequest.prototype.clearNewData = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.MergeToDoListRequest.prototype.hasNewData = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool overwrite_instead_of_merge = 4;
 * @return {boolean}
 */
proto.pyatdl.MergeToDoListRequest.prototype.getOverwriteInsteadOfMerge = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pyatdl.MergeToDoListRequest} returns this
 */
proto.pyatdl.MergeToDoListRequest.prototype.setOverwriteInsteadOfMerge = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pyatdl.MergeToDoListRequest} returns this
 */
proto.pyatdl.MergeToDoListRequest.prototype.clearOverwriteInsteadOfMerge = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.MergeToDoListRequest.prototype.hasOverwriteInsteadOfMerge = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool abort_if_merge_is_required = 5;
 * @return {boolean}
 */
proto.pyatdl.MergeToDoListRequest.prototype.getAbortIfMergeIsRequired = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pyatdl.MergeToDoListRequest} returns this
 */
proto.pyatdl.MergeToDoListRequest.prototype.setAbortIfMergeIsRequired = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pyatdl.MergeToDoListRequest} returns this
 */
proto.pyatdl.MergeToDoListRequest.prototype.clearAbortIfMergeIsRequired = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.MergeToDoListRequest.prototype.hasAbortIfMergeIsRequired = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional fixed64 sanity_check = 15;
 * @return {string}
 */
proto.pyatdl.MergeToDoListRequest.prototype.getSanityCheck = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, "0"));
};


/**
 * @param {string} value
 * @return {!proto.pyatdl.MergeToDoListRequest} returns this
 */
proto.pyatdl.MergeToDoListRequest.prototype.setSanityCheck = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pyatdl.MergeToDoListRequest} returns this
 */
proto.pyatdl.MergeToDoListRequest.prototype.clearSanityCheck = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.MergeToDoListRequest.prototype.hasSanityCheck = function() {
  return jspb.Message.getField(this, 15) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pyatdl.MergeToDoListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pyatdl.MergeToDoListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pyatdl.MergeToDoListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pyatdl.MergeToDoListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    sha1Checksum: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    toDoList: (f = msg.getToDoList()) && proto.pyatdl.ToDoList.toObject(includeInstance, f),
    starterTemplate: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    sanityCheck: (f = jspb.Message.getField(msg, 15)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pyatdl.MergeToDoListResponse}
 */
proto.pyatdl.MergeToDoListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pyatdl.MergeToDoListResponse;
  return proto.pyatdl.MergeToDoListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pyatdl.MergeToDoListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pyatdl.MergeToDoListResponse}
 */
proto.pyatdl.MergeToDoListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSha1Checksum(value);
      break;
    case 2:
      var value = new proto.pyatdl.ToDoList;
      reader.readMessage(value,proto.pyatdl.ToDoList.deserializeBinaryFromReader);
      msg.setToDoList(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStarterTemplate(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readFixed64String());
      msg.setSanityCheck(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pyatdl.MergeToDoListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pyatdl.MergeToDoListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pyatdl.MergeToDoListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pyatdl.MergeToDoListResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getToDoList();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pyatdl.ToDoList.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeFixed64String(
      15,
      f
    );
  }
};


/**
 * optional string sha1_checksum = 1;
 * @return {string}
 */
proto.pyatdl.MergeToDoListResponse.prototype.getSha1Checksum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pyatdl.MergeToDoListResponse} returns this
 */
proto.pyatdl.MergeToDoListResponse.prototype.setSha1Checksum = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pyatdl.MergeToDoListResponse} returns this
 */
proto.pyatdl.MergeToDoListResponse.prototype.clearSha1Checksum = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.MergeToDoListResponse.prototype.hasSha1Checksum = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ToDoList to_do_list = 2;
 * @return {?proto.pyatdl.ToDoList}
 */
proto.pyatdl.MergeToDoListResponse.prototype.getToDoList = function() {
  return /** @type{?proto.pyatdl.ToDoList} */ (
    jspb.Message.getWrapperField(this, proto.pyatdl.ToDoList, 2));
};


/**
 * @param {?proto.pyatdl.ToDoList|undefined} value
 * @return {!proto.pyatdl.MergeToDoListResponse} returns this
*/
proto.pyatdl.MergeToDoListResponse.prototype.setToDoList = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pyatdl.MergeToDoListResponse} returns this
 */
proto.pyatdl.MergeToDoListResponse.prototype.clearToDoList = function() {
  return this.setToDoList(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.MergeToDoListResponse.prototype.hasToDoList = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool starter_template = 3;
 * @return {boolean}
 */
proto.pyatdl.MergeToDoListResponse.prototype.getStarterTemplate = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pyatdl.MergeToDoListResponse} returns this
 */
proto.pyatdl.MergeToDoListResponse.prototype.setStarterTemplate = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pyatdl.MergeToDoListResponse} returns this
 */
proto.pyatdl.MergeToDoListResponse.prototype.clearStarterTemplate = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.MergeToDoListResponse.prototype.hasStarterTemplate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional fixed64 sanity_check = 15;
 * @return {string}
 */
proto.pyatdl.MergeToDoListResponse.prototype.getSanityCheck = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, "0"));
};


/**
 * @param {string} value
 * @return {!proto.pyatdl.MergeToDoListResponse} returns this
 */
proto.pyatdl.MergeToDoListResponse.prototype.setSanityCheck = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pyatdl.MergeToDoListResponse} returns this
 */
proto.pyatdl.MergeToDoListResponse.prototype.clearSanityCheck = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.MergeToDoListResponse.prototype.hasSanityCheck = function() {
  return jspb.Message.getField(this, 15) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pyatdl.ChecksumAndData.prototype.toObject = function(opt_includeInstance) {
  return proto.pyatdl.ChecksumAndData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pyatdl.ChecksumAndData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pyatdl.ChecksumAndData.toObject = function(includeInstance, msg) {
  var f, obj = {
    payloadLength: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    sha1Checksum: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    payloadIsZlibCompressed: (f = jspb.Message.getBooleanField(msg, 3)) == null ? undefined : f,
    payload: msg.getPayload_asB64()
  };

  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,
      proto.pyatdl.ChecksumAndData.extensions, proto.pyatdl.ChecksumAndData.prototype.getExtension,
      includeInstance);
  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pyatdl.ChecksumAndData}
 */
proto.pyatdl.ChecksumAndData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pyatdl.ChecksumAndData;
  return proto.pyatdl.ChecksumAndData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pyatdl.ChecksumAndData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pyatdl.ChecksumAndData}
 */
proto.pyatdl.ChecksumAndData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setPayloadLength(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSha1Checksum(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPayloadIsZlibCompressed(value);
      break;
    case 10123:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    default:
      jspb.Message.readBinaryExtension(msg, reader,
        proto.pyatdl.ChecksumAndData.extensionsBinary,
        proto.pyatdl.ChecksumAndData.prototype.getExtension,
        proto.pyatdl.ChecksumAndData.prototype.setExtension);
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pyatdl.ChecksumAndData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pyatdl.ChecksumAndData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pyatdl.ChecksumAndData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pyatdl.ChecksumAndData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 10123));
  if (f != null) {
    writer.writeBytes(
      10123,
      f
    );
  }
  jspb.Message.serializeBinaryExtensions(message, writer,
    proto.pyatdl.ChecksumAndData.extensionsBinary, proto.pyatdl.ChecksumAndData.prototype.getExtension);
};


/**
 * required int64 payload_length = 1;
 * @return {string}
 */
proto.pyatdl.ChecksumAndData.prototype.getPayloadLength = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.pyatdl.ChecksumAndData} returns this
 */
proto.pyatdl.ChecksumAndData.prototype.setPayloadLength = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pyatdl.ChecksumAndData} returns this
 */
proto.pyatdl.ChecksumAndData.prototype.clearPayloadLength = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.ChecksumAndData.prototype.hasPayloadLength = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string sha1_checksum = 2;
 * @return {string}
 */
proto.pyatdl.ChecksumAndData.prototype.getSha1Checksum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pyatdl.ChecksumAndData} returns this
 */
proto.pyatdl.ChecksumAndData.prototype.setSha1Checksum = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pyatdl.ChecksumAndData} returns this
 */
proto.pyatdl.ChecksumAndData.prototype.clearSha1Checksum = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.ChecksumAndData.prototype.hasSha1Checksum = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool payload_is_zlib_compressed = 3;
 * @return {boolean}
 */
proto.pyatdl.ChecksumAndData.prototype.getPayloadIsZlibCompressed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pyatdl.ChecksumAndData} returns this
 */
proto.pyatdl.ChecksumAndData.prototype.setPayloadIsZlibCompressed = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pyatdl.ChecksumAndData} returns this
 */
proto.pyatdl.ChecksumAndData.prototype.clearPayloadIsZlibCompressed = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.ChecksumAndData.prototype.hasPayloadIsZlibCompressed = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required bytes payload = 10123;
 * @return {!(string|Uint8Array)}
 */
proto.pyatdl.ChecksumAndData.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10123, ""));
};


/**
 * required bytes payload = 10123;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.pyatdl.ChecksumAndData.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * required bytes payload = 10123;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.pyatdl.ChecksumAndData.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.pyatdl.ChecksumAndData} returns this
 */
proto.pyatdl.ChecksumAndData.prototype.setPayload = function(value) {
  return jspb.Message.setField(this, 10123, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pyatdl.ChecksumAndData} returns this
 */
proto.pyatdl.ChecksumAndData.prototype.clearPayload = function() {
  return jspb.Message.setField(this, 10123, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.ChecksumAndData.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 10123) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pyatdl.UserInfoAndToDoList.prototype.toObject = function(opt_includeInstance) {
  return proto.pyatdl.UserInfoAndToDoList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pyatdl.UserInfoAndToDoList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pyatdl.UserInfoAndToDoList.toObject = function(includeInstance, msg) {
  var f, obj = {
    personaName: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    username: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    jsonWebToken: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    checksumAndData: (f = msg.getChecksumAndData()) && proto.pyatdl.ChecksumAndData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pyatdl.UserInfoAndToDoList}
 */
proto.pyatdl.UserInfoAndToDoList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pyatdl.UserInfoAndToDoList;
  return proto.pyatdl.UserInfoAndToDoList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pyatdl.UserInfoAndToDoList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pyatdl.UserInfoAndToDoList}
 */
proto.pyatdl.UserInfoAndToDoList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPersonaName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setJsonWebToken(value);
      break;
    case 10123:
      var value = new proto.pyatdl.ChecksumAndData;
      reader.readMessage(value,proto.pyatdl.ChecksumAndData.deserializeBinaryFromReader);
      msg.setChecksumAndData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pyatdl.UserInfoAndToDoList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pyatdl.UserInfoAndToDoList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pyatdl.UserInfoAndToDoList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pyatdl.UserInfoAndToDoList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getChecksumAndData();
  if (f != null) {
    writer.writeMessage(
      10123,
      f,
      proto.pyatdl.ChecksumAndData.serializeBinaryToWriter
    );
  }
};


/**
 * optional string persona_name = 1;
 * @return {string}
 */
proto.pyatdl.UserInfoAndToDoList.prototype.getPersonaName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pyatdl.UserInfoAndToDoList} returns this
 */
proto.pyatdl.UserInfoAndToDoList.prototype.setPersonaName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pyatdl.UserInfoAndToDoList} returns this
 */
proto.pyatdl.UserInfoAndToDoList.prototype.clearPersonaName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.UserInfoAndToDoList.prototype.hasPersonaName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string username = 2;
 * @return {string}
 */
proto.pyatdl.UserInfoAndToDoList.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pyatdl.UserInfoAndToDoList} returns this
 */
proto.pyatdl.UserInfoAndToDoList.prototype.setUsername = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pyatdl.UserInfoAndToDoList} returns this
 */
proto.pyatdl.UserInfoAndToDoList.prototype.clearUsername = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.UserInfoAndToDoList.prototype.hasUsername = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string json_web_token = 3;
 * @return {string}
 */
proto.pyatdl.UserInfoAndToDoList.prototype.getJsonWebToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pyatdl.UserInfoAndToDoList} returns this
 */
proto.pyatdl.UserInfoAndToDoList.prototype.setJsonWebToken = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pyatdl.UserInfoAndToDoList} returns this
 */
proto.pyatdl.UserInfoAndToDoList.prototype.clearJsonWebToken = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.UserInfoAndToDoList.prototype.hasJsonWebToken = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ChecksumAndData checksum_and_data = 10123;
 * @return {?proto.pyatdl.ChecksumAndData}
 */
proto.pyatdl.UserInfoAndToDoList.prototype.getChecksumAndData = function() {
  return /** @type{?proto.pyatdl.ChecksumAndData} */ (
    jspb.Message.getWrapperField(this, proto.pyatdl.ChecksumAndData, 10123));
};


/**
 * @param {?proto.pyatdl.ChecksumAndData|undefined} value
 * @return {!proto.pyatdl.UserInfoAndToDoList} returns this
*/
proto.pyatdl.UserInfoAndToDoList.prototype.setChecksumAndData = function(value) {
  return jspb.Message.setWrapperField(this, 10123, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pyatdl.UserInfoAndToDoList} returns this
 */
proto.pyatdl.UserInfoAndToDoList.prototype.clearChecksumAndData = function() {
  return this.setChecksumAndData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.UserInfoAndToDoList.prototype.hasChecksumAndData = function() {
  return jspb.Message.getField(this, 10123) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pyatdl.Timestamp.prototype.toObject = function(opt_includeInstance) {
  return proto.pyatdl.Timestamp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pyatdl.Timestamp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pyatdl.Timestamp.toObject = function(includeInstance, msg) {
  var f, obj = {
    ctime: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    dtime: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    mtime: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pyatdl.Timestamp}
 */
proto.pyatdl.Timestamp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pyatdl.Timestamp;
  return proto.pyatdl.Timestamp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pyatdl.Timestamp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pyatdl.Timestamp}
 */
proto.pyatdl.Timestamp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setCtime(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setDtime(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setMtime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pyatdl.Timestamp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pyatdl.Timestamp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pyatdl.Timestamp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pyatdl.Timestamp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64String(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64String(
      3,
      f
    );
  }
};


/**
 * optional int64 ctime = 1;
 * @return {string}
 */
proto.pyatdl.Timestamp.prototype.getCtime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.pyatdl.Timestamp} returns this
 */
proto.pyatdl.Timestamp.prototype.setCtime = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pyatdl.Timestamp} returns this
 */
proto.pyatdl.Timestamp.prototype.clearCtime = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.Timestamp.prototype.hasCtime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 dtime = 2;
 * @return {string}
 */
proto.pyatdl.Timestamp.prototype.getDtime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.pyatdl.Timestamp} returns this
 */
proto.pyatdl.Timestamp.prototype.setDtime = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pyatdl.Timestamp} returns this
 */
proto.pyatdl.Timestamp.prototype.clearDtime = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.Timestamp.prototype.hasDtime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 mtime = 3;
 * @return {string}
 */
proto.pyatdl.Timestamp.prototype.getMtime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.pyatdl.Timestamp} returns this
 */
proto.pyatdl.Timestamp.prototype.setMtime = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pyatdl.Timestamp} returns this
 */
proto.pyatdl.Timestamp.prototype.clearMtime = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.Timestamp.prototype.hasMtime = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pyatdl.Metadata.prototype.toObject = function(opt_includeInstance) {
  return proto.pyatdl.Metadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pyatdl.Metadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pyatdl.Metadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    note: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,
      proto.pyatdl.Metadata.extensions, proto.pyatdl.Metadata.prototype.getExtension,
      includeInstance);
  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pyatdl.Metadata}
 */
proto.pyatdl.Metadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pyatdl.Metadata;
  return proto.pyatdl.Metadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pyatdl.Metadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pyatdl.Metadata}
 */
proto.pyatdl.Metadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    default:
      jspb.Message.readBinaryExtension(msg, reader,
        proto.pyatdl.Metadata.extensionsBinary,
        proto.pyatdl.Metadata.prototype.getExtension,
        proto.pyatdl.Metadata.prototype.setExtension);
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pyatdl.Metadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pyatdl.Metadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pyatdl.Metadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pyatdl.Metadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  jspb.Message.serializeBinaryExtensions(message, writer,
    proto.pyatdl.Metadata.extensionsBinary, proto.pyatdl.Metadata.prototype.getExtension);
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.pyatdl.Metadata.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pyatdl.Metadata} returns this
 */
proto.pyatdl.Metadata.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pyatdl.Metadata} returns this
 */
proto.pyatdl.Metadata.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.Metadata.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string note = 2;
 * @return {string}
 */
proto.pyatdl.Metadata.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pyatdl.Metadata} returns this
 */
proto.pyatdl.Metadata.prototype.setNote = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pyatdl.Metadata} returns this
 */
proto.pyatdl.Metadata.prototype.clearNote = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.Metadata.prototype.hasNote = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pyatdl.Common.prototype.toObject = function(opt_includeInstance) {
  return proto.pyatdl.Common.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pyatdl.Common} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pyatdl.Common.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    isDeleted: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f,
    timestamp: (f = msg.getTimestamp()) && proto.pyatdl.Timestamp.toObject(includeInstance, f),
    metadata: (f = msg.getMetadata()) && proto.pyatdl.Metadata.toObject(includeInstance, f)
  };

  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,
      proto.pyatdl.Common.extensions, proto.pyatdl.Common.prototype.getExtension,
      includeInstance);
  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pyatdl.Common}
 */
proto.pyatdl.Common.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pyatdl.Common;
  return proto.pyatdl.Common.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pyatdl.Common} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pyatdl.Common}
 */
proto.pyatdl.Common.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 4:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setUid(value);
      break;
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsDeleted(value);
      break;
    case 2:
      var value = new proto.pyatdl.Timestamp;
      reader.readMessage(value,proto.pyatdl.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 3:
      var value = new proto.pyatdl.Metadata;
      reader.readMessage(value,proto.pyatdl.Metadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    default:
      jspb.Message.readBinaryExtension(msg, reader,
        proto.pyatdl.Common.extensionsBinary,
        proto.pyatdl.Common.prototype.getExtension,
        proto.pyatdl.Common.prototype.setExtension);
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pyatdl.Common.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pyatdl.Common.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pyatdl.Common} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pyatdl.Common.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt64String(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pyatdl.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.pyatdl.Metadata.serializeBinaryToWriter
    );
  }
  jspb.Message.serializeBinaryExtensions(message, writer,
    proto.pyatdl.Common.extensionsBinary, proto.pyatdl.Common.prototype.getExtension);
};


/**
 * optional int64 uid = 4;
 * @return {string}
 */
proto.pyatdl.Common.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, "0"));
};


/**
 * @param {string} value
 * @return {!proto.pyatdl.Common} returns this
 */
proto.pyatdl.Common.prototype.setUid = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pyatdl.Common} returns this
 */
proto.pyatdl.Common.prototype.clearUid = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.Common.prototype.hasUid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool is_deleted = 1;
 * @return {boolean}
 */
proto.pyatdl.Common.prototype.getIsDeleted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pyatdl.Common} returns this
 */
proto.pyatdl.Common.prototype.setIsDeleted = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pyatdl.Common} returns this
 */
proto.pyatdl.Common.prototype.clearIsDeleted = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.Common.prototype.hasIsDeleted = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Timestamp timestamp = 2;
 * @return {?proto.pyatdl.Timestamp}
 */
proto.pyatdl.Common.prototype.getTimestamp = function() {
  return /** @type{?proto.pyatdl.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.pyatdl.Timestamp, 2));
};


/**
 * @param {?proto.pyatdl.Timestamp|undefined} value
 * @return {!proto.pyatdl.Common} returns this
*/
proto.pyatdl.Common.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pyatdl.Common} returns this
 */
proto.pyatdl.Common.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.Common.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Metadata metadata = 3;
 * @return {?proto.pyatdl.Metadata}
 */
proto.pyatdl.Common.prototype.getMetadata = function() {
  return /** @type{?proto.pyatdl.Metadata} */ (
    jspb.Message.getWrapperField(this, proto.pyatdl.Metadata, 3));
};


/**
 * @param {?proto.pyatdl.Metadata|undefined} value
 * @return {!proto.pyatdl.Common} returns this
*/
proto.pyatdl.Common.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pyatdl.Common} returns this
 */
proto.pyatdl.Common.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.Common.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pyatdl.Context.prototype.toObject = function(opt_includeInstance) {
  return proto.pyatdl.Context.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pyatdl.Context} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pyatdl.Context.toObject = function(includeInstance, msg) {
  var f, obj = {
    common: (f = msg.getCommon()) && proto.pyatdl.Common.toObject(includeInstance, f),
    isActive: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f
  };

  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,
      proto.pyatdl.Context.extensions, proto.pyatdl.Context.prototype.getExtension,
      includeInstance);
  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pyatdl.Context}
 */
proto.pyatdl.Context.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pyatdl.Context;
  return proto.pyatdl.Context.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pyatdl.Context} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pyatdl.Context}
 */
proto.pyatdl.Context.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pyatdl.Common;
      reader.readMessage(value,proto.pyatdl.Common.deserializeBinaryFromReader);
      msg.setCommon(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsActive(value);
      break;
    default:
      jspb.Message.readBinaryExtension(msg, reader,
        proto.pyatdl.Context.extensionsBinary,
        proto.pyatdl.Context.prototype.getExtension,
        proto.pyatdl.Context.prototype.setExtension);
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pyatdl.Context.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pyatdl.Context.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pyatdl.Context} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pyatdl.Context.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommon();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pyatdl.Common.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  jspb.Message.serializeBinaryExtensions(message, writer,
    proto.pyatdl.Context.extensionsBinary, proto.pyatdl.Context.prototype.getExtension);
};


/**
 * optional Common common = 1;
 * @return {?proto.pyatdl.Common}
 */
proto.pyatdl.Context.prototype.getCommon = function() {
  return /** @type{?proto.pyatdl.Common} */ (
    jspb.Message.getWrapperField(this, proto.pyatdl.Common, 1));
};


/**
 * @param {?proto.pyatdl.Common|undefined} value
 * @return {!proto.pyatdl.Context} returns this
*/
proto.pyatdl.Context.prototype.setCommon = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pyatdl.Context} returns this
 */
proto.pyatdl.Context.prototype.clearCommon = function() {
  return this.setCommon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.Context.prototype.hasCommon = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool is_active = 2;
 * @return {boolean}
 */
proto.pyatdl.Context.prototype.getIsActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pyatdl.Context} returns this
 */
proto.pyatdl.Context.prototype.setIsActive = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pyatdl.Context} returns this
 */
proto.pyatdl.Context.prototype.clearIsActive = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.Context.prototype.hasIsActive = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pyatdl.Action.prototype.toObject = function(opt_includeInstance) {
  return proto.pyatdl.Action.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pyatdl.Action} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pyatdl.Action.toObject = function(includeInstance, msg) {
  var f, obj = {
    common: (f = msg.getCommon()) && proto.pyatdl.Common.toObject(includeInstance, f),
    isComplete: (f = jspb.Message.getBooleanField(msg, 3)) == null ? undefined : f,
    ctxUid: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
  };

  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,
      proto.pyatdl.Action.extensions, proto.pyatdl.Action.prototype.getExtension,
      includeInstance);
  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pyatdl.Action}
 */
proto.pyatdl.Action.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pyatdl.Action;
  return proto.pyatdl.Action.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pyatdl.Action} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pyatdl.Action}
 */
proto.pyatdl.Action.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pyatdl.Common;
      reader.readMessage(value,proto.pyatdl.Common.deserializeBinaryFromReader);
      msg.setCommon(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsComplete(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setCtxUid(value);
      break;
    default:
      jspb.Message.readBinaryExtension(msg, reader,
        proto.pyatdl.Action.extensionsBinary,
        proto.pyatdl.Action.prototype.getExtension,
        proto.pyatdl.Action.prototype.setExtension);
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pyatdl.Action.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pyatdl.Action.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pyatdl.Action} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pyatdl.Action.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommon();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pyatdl.Common.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt64String(
      5,
      f
    );
  }
  jspb.Message.serializeBinaryExtensions(message, writer,
    proto.pyatdl.Action.extensionsBinary, proto.pyatdl.Action.prototype.getExtension);
};


/**
 * optional Common common = 1;
 * @return {?proto.pyatdl.Common}
 */
proto.pyatdl.Action.prototype.getCommon = function() {
  return /** @type{?proto.pyatdl.Common} */ (
    jspb.Message.getWrapperField(this, proto.pyatdl.Common, 1));
};


/**
 * @param {?proto.pyatdl.Common|undefined} value
 * @return {!proto.pyatdl.Action} returns this
*/
proto.pyatdl.Action.prototype.setCommon = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pyatdl.Action} returns this
 */
proto.pyatdl.Action.prototype.clearCommon = function() {
  return this.setCommon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.Action.prototype.hasCommon = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool is_complete = 3;
 * @return {boolean}
 */
proto.pyatdl.Action.prototype.getIsComplete = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pyatdl.Action} returns this
 */
proto.pyatdl.Action.prototype.setIsComplete = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pyatdl.Action} returns this
 */
proto.pyatdl.Action.prototype.clearIsComplete = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.Action.prototype.hasIsComplete = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 ctx_uid = 5;
 * @return {string}
 */
proto.pyatdl.Action.prototype.getCtxUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, "0"));
};


/**
 * @param {string} value
 * @return {!proto.pyatdl.Action} returns this
 */
proto.pyatdl.Action.prototype.setCtxUid = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pyatdl.Action} returns this
 */
proto.pyatdl.Action.prototype.clearCtxUid = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.Action.prototype.hasCtxUid = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pyatdl.Project.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pyatdl.Project.prototype.toObject = function(opt_includeInstance) {
  return proto.pyatdl.Project.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pyatdl.Project} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pyatdl.Project.toObject = function(includeInstance, msg) {
  var f, obj = {
    common: (f = msg.getCommon()) && proto.pyatdl.Common.toObject(includeInstance, f),
    isComplete: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f,
    isActive: (f = jspb.Message.getBooleanField(msg, 3)) == null ? undefined : f,
    actionsList: jspb.Message.toObjectList(msg.getActionsList(),
    proto.pyatdl.Action.toObject, includeInstance),
    maxSecondsBeforeReview: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    lastReviewEpochSeconds: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    defaultContextUid: jspb.Message.getFieldWithDefault(msg, 7, "0")
  };

  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,
      proto.pyatdl.Project.extensions, proto.pyatdl.Project.prototype.getExtension,
      includeInstance);
  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pyatdl.Project}
 */
proto.pyatdl.Project.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pyatdl.Project;
  return proto.pyatdl.Project.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pyatdl.Project} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pyatdl.Project}
 */
proto.pyatdl.Project.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pyatdl.Common;
      reader.readMessage(value,proto.pyatdl.Common.deserializeBinaryFromReader);
      msg.setCommon(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsComplete(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsActive(value);
      break;
    case 4:
      var value = new proto.pyatdl.Action;
      reader.readMessage(value,proto.pyatdl.Action.deserializeBinaryFromReader);
      msg.addActions(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMaxSecondsBeforeReview(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLastReviewEpochSeconds(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setDefaultContextUid(value);
      break;
    default:
      jspb.Message.readBinaryExtension(msg, reader,
        proto.pyatdl.Project.extensionsBinary,
        proto.pyatdl.Project.prototype.getExtension,
        proto.pyatdl.Project.prototype.setExtension);
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pyatdl.Project.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pyatdl.Project.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pyatdl.Project} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pyatdl.Project.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommon();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pyatdl.Common.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.pyatdl.Action.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt64String(
      7,
      f
    );
  }
  jspb.Message.serializeBinaryExtensions(message, writer,
    proto.pyatdl.Project.extensionsBinary, proto.pyatdl.Project.prototype.getExtension);
};


/**
 * optional Common common = 1;
 * @return {?proto.pyatdl.Common}
 */
proto.pyatdl.Project.prototype.getCommon = function() {
  return /** @type{?proto.pyatdl.Common} */ (
    jspb.Message.getWrapperField(this, proto.pyatdl.Common, 1));
};


/**
 * @param {?proto.pyatdl.Common|undefined} value
 * @return {!proto.pyatdl.Project} returns this
*/
proto.pyatdl.Project.prototype.setCommon = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pyatdl.Project} returns this
 */
proto.pyatdl.Project.prototype.clearCommon = function() {
  return this.setCommon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.Project.prototype.hasCommon = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool is_complete = 2;
 * @return {boolean}
 */
proto.pyatdl.Project.prototype.getIsComplete = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pyatdl.Project} returns this
 */
proto.pyatdl.Project.prototype.setIsComplete = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pyatdl.Project} returns this
 */
proto.pyatdl.Project.prototype.clearIsComplete = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.Project.prototype.hasIsComplete = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool is_active = 3;
 * @return {boolean}
 */
proto.pyatdl.Project.prototype.getIsActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pyatdl.Project} returns this
 */
proto.pyatdl.Project.prototype.setIsActive = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pyatdl.Project} returns this
 */
proto.pyatdl.Project.prototype.clearIsActive = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.Project.prototype.hasIsActive = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated Action actions = 4;
 * @return {!Array<!proto.pyatdl.Action>}
 */
proto.pyatdl.Project.prototype.getActionsList = function() {
  return /** @type{!Array<!proto.pyatdl.Action>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pyatdl.Action, 4));
};


/**
 * @param {!Array<!proto.pyatdl.Action>} value
 * @return {!proto.pyatdl.Project} returns this
*/
proto.pyatdl.Project.prototype.setActionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.pyatdl.Action=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pyatdl.Action}
 */
proto.pyatdl.Project.prototype.addActions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.pyatdl.Action, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pyatdl.Project} returns this
 */
proto.pyatdl.Project.prototype.clearActionsList = function() {
  return this.setActionsList([]);
};


/**
 * optional float max_seconds_before_review = 5;
 * @return {number}
 */
proto.pyatdl.Project.prototype.getMaxSecondsBeforeReview = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pyatdl.Project} returns this
 */
proto.pyatdl.Project.prototype.setMaxSecondsBeforeReview = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pyatdl.Project} returns this
 */
proto.pyatdl.Project.prototype.clearMaxSecondsBeforeReview = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.Project.prototype.hasMaxSecondsBeforeReview = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional float last_review_epoch_seconds = 6;
 * @return {number}
 */
proto.pyatdl.Project.prototype.getLastReviewEpochSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pyatdl.Project} returns this
 */
proto.pyatdl.Project.prototype.setLastReviewEpochSeconds = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pyatdl.Project} returns this
 */
proto.pyatdl.Project.prototype.clearLastReviewEpochSeconds = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.Project.prototype.hasLastReviewEpochSeconds = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int64 default_context_uid = 7;
 * @return {string}
 */
proto.pyatdl.Project.prototype.getDefaultContextUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, "0"));
};


/**
 * @param {string} value
 * @return {!proto.pyatdl.Project} returns this
 */
proto.pyatdl.Project.prototype.setDefaultContextUid = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pyatdl.Project} returns this
 */
proto.pyatdl.Project.prototype.clearDefaultContextUid = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.Project.prototype.hasDefaultContextUid = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pyatdl.Note.prototype.toObject = function(opt_includeInstance) {
  return proto.pyatdl.Note.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pyatdl.Note} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pyatdl.Note.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    note: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,
      proto.pyatdl.Note.extensions, proto.pyatdl.Note.prototype.getExtension,
      includeInstance);
  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pyatdl.Note}
 */
proto.pyatdl.Note.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pyatdl.Note;
  return proto.pyatdl.Note.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pyatdl.Note} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pyatdl.Note}
 */
proto.pyatdl.Note.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    default:
      jspb.Message.readBinaryExtension(msg, reader,
        proto.pyatdl.Note.extensionsBinary,
        proto.pyatdl.Note.prototype.getExtension,
        proto.pyatdl.Note.prototype.setExtension);
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pyatdl.Note.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pyatdl.Note.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pyatdl.Note} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pyatdl.Note.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  jspb.Message.serializeBinaryExtensions(message, writer,
    proto.pyatdl.Note.extensionsBinary, proto.pyatdl.Note.prototype.getExtension);
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.pyatdl.Note.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pyatdl.Note} returns this
 */
proto.pyatdl.Note.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pyatdl.Note} returns this
 */
proto.pyatdl.Note.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.Note.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string note = 2;
 * @return {string}
 */
proto.pyatdl.Note.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pyatdl.Note} returns this
 */
proto.pyatdl.Note.prototype.setNote = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pyatdl.Note} returns this
 */
proto.pyatdl.Note.prototype.clearNote = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.Note.prototype.hasNote = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pyatdl.NoteList.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pyatdl.NoteList.prototype.toObject = function(opt_includeInstance) {
  return proto.pyatdl.NoteList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pyatdl.NoteList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pyatdl.NoteList.toObject = function(includeInstance, msg) {
  var f, obj = {
    notesList: jspb.Message.toObjectList(msg.getNotesList(),
    proto.pyatdl.Note.toObject, includeInstance)
  };

  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,
      proto.pyatdl.NoteList.extensions, proto.pyatdl.NoteList.prototype.getExtension,
      includeInstance);
  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pyatdl.NoteList}
 */
proto.pyatdl.NoteList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pyatdl.NoteList;
  return proto.pyatdl.NoteList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pyatdl.NoteList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pyatdl.NoteList}
 */
proto.pyatdl.NoteList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.pyatdl.Note;
      reader.readMessage(value,proto.pyatdl.Note.deserializeBinaryFromReader);
      msg.addNotes(value);
      break;
    default:
      jspb.Message.readBinaryExtension(msg, reader,
        proto.pyatdl.NoteList.extensionsBinary,
        proto.pyatdl.NoteList.prototype.getExtension,
        proto.pyatdl.NoteList.prototype.setExtension);
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pyatdl.NoteList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pyatdl.NoteList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pyatdl.NoteList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pyatdl.NoteList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNotesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.pyatdl.Note.serializeBinaryToWriter
    );
  }
  jspb.Message.serializeBinaryExtensions(message, writer,
    proto.pyatdl.NoteList.extensionsBinary, proto.pyatdl.NoteList.prototype.getExtension);
};


/**
 * repeated Note notes = 2;
 * @return {!Array<!proto.pyatdl.Note>}
 */
proto.pyatdl.NoteList.prototype.getNotesList = function() {
  return /** @type{!Array<!proto.pyatdl.Note>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pyatdl.Note, 2));
};


/**
 * @param {!Array<!proto.pyatdl.Note>} value
 * @return {!proto.pyatdl.NoteList} returns this
*/
proto.pyatdl.NoteList.prototype.setNotesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.pyatdl.Note=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pyatdl.Note}
 */
proto.pyatdl.NoteList.prototype.addNotes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.pyatdl.Note, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pyatdl.NoteList} returns this
 */
proto.pyatdl.NoteList.prototype.clearNotesList = function() {
  return this.setNotesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pyatdl.ContextList.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pyatdl.ContextList.prototype.toObject = function(opt_includeInstance) {
  return proto.pyatdl.ContextList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pyatdl.ContextList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pyatdl.ContextList.toObject = function(includeInstance, msg) {
  var f, obj = {
    common: (f = msg.getCommon()) && proto.pyatdl.Common.toObject(includeInstance, f),
    contextsList: jspb.Message.toObjectList(msg.getContextsList(),
    proto.pyatdl.Context.toObject, includeInstance)
  };

  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,
      proto.pyatdl.ContextList.extensions, proto.pyatdl.ContextList.prototype.getExtension,
      includeInstance);
  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pyatdl.ContextList}
 */
proto.pyatdl.ContextList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pyatdl.ContextList;
  return proto.pyatdl.ContextList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pyatdl.ContextList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pyatdl.ContextList}
 */
proto.pyatdl.ContextList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pyatdl.Common;
      reader.readMessage(value,proto.pyatdl.Common.deserializeBinaryFromReader);
      msg.setCommon(value);
      break;
    case 2:
      var value = new proto.pyatdl.Context;
      reader.readMessage(value,proto.pyatdl.Context.deserializeBinaryFromReader);
      msg.addContexts(value);
      break;
    default:
      jspb.Message.readBinaryExtension(msg, reader,
        proto.pyatdl.ContextList.extensionsBinary,
        proto.pyatdl.ContextList.prototype.getExtension,
        proto.pyatdl.ContextList.prototype.setExtension);
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pyatdl.ContextList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pyatdl.ContextList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pyatdl.ContextList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pyatdl.ContextList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommon();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pyatdl.Common.serializeBinaryToWriter
    );
  }
  f = message.getContextsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.pyatdl.Context.serializeBinaryToWriter
    );
  }
  jspb.Message.serializeBinaryExtensions(message, writer,
    proto.pyatdl.ContextList.extensionsBinary, proto.pyatdl.ContextList.prototype.getExtension);
};


/**
 * optional Common common = 1;
 * @return {?proto.pyatdl.Common}
 */
proto.pyatdl.ContextList.prototype.getCommon = function() {
  return /** @type{?proto.pyatdl.Common} */ (
    jspb.Message.getWrapperField(this, proto.pyatdl.Common, 1));
};


/**
 * @param {?proto.pyatdl.Common|undefined} value
 * @return {!proto.pyatdl.ContextList} returns this
*/
proto.pyatdl.ContextList.prototype.setCommon = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pyatdl.ContextList} returns this
 */
proto.pyatdl.ContextList.prototype.clearCommon = function() {
  return this.setCommon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.ContextList.prototype.hasCommon = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Context contexts = 2;
 * @return {!Array<!proto.pyatdl.Context>}
 */
proto.pyatdl.ContextList.prototype.getContextsList = function() {
  return /** @type{!Array<!proto.pyatdl.Context>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pyatdl.Context, 2));
};


/**
 * @param {!Array<!proto.pyatdl.Context>} value
 * @return {!proto.pyatdl.ContextList} returns this
*/
proto.pyatdl.ContextList.prototype.setContextsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.pyatdl.Context=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pyatdl.Context}
 */
proto.pyatdl.ContextList.prototype.addContexts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.pyatdl.Context, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pyatdl.ContextList} returns this
 */
proto.pyatdl.ContextList.prototype.clearContextsList = function() {
  return this.setContextsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pyatdl.Folder.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pyatdl.Folder.prototype.toObject = function(opt_includeInstance) {
  return proto.pyatdl.Folder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pyatdl.Folder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pyatdl.Folder.toObject = function(includeInstance, msg) {
  var f, obj = {
    common: (f = msg.getCommon()) && proto.pyatdl.Common.toObject(includeInstance, f),
    foldersList: jspb.Message.toObjectList(msg.getFoldersList(),
    proto.pyatdl.Folder.toObject, includeInstance),
    projectsList: jspb.Message.toObjectList(msg.getProjectsList(),
    proto.pyatdl.Project.toObject, includeInstance)
  };

  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,
      proto.pyatdl.Folder.extensions, proto.pyatdl.Folder.prototype.getExtension,
      includeInstance);
  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pyatdl.Folder}
 */
proto.pyatdl.Folder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pyatdl.Folder;
  return proto.pyatdl.Folder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pyatdl.Folder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pyatdl.Folder}
 */
proto.pyatdl.Folder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pyatdl.Common;
      reader.readMessage(value,proto.pyatdl.Common.deserializeBinaryFromReader);
      msg.setCommon(value);
      break;
    case 2:
      var value = new proto.pyatdl.Folder;
      reader.readMessage(value,proto.pyatdl.Folder.deserializeBinaryFromReader);
      msg.addFolders(value);
      break;
    case 3:
      var value = new proto.pyatdl.Project;
      reader.readMessage(value,proto.pyatdl.Project.deserializeBinaryFromReader);
      msg.addProjects(value);
      break;
    default:
      jspb.Message.readBinaryExtension(msg, reader,
        proto.pyatdl.Folder.extensionsBinary,
        proto.pyatdl.Folder.prototype.getExtension,
        proto.pyatdl.Folder.prototype.setExtension);
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pyatdl.Folder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pyatdl.Folder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pyatdl.Folder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pyatdl.Folder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommon();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pyatdl.Common.serializeBinaryToWriter
    );
  }
  f = message.getFoldersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.pyatdl.Folder.serializeBinaryToWriter
    );
  }
  f = message.getProjectsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.pyatdl.Project.serializeBinaryToWriter
    );
  }
  jspb.Message.serializeBinaryExtensions(message, writer,
    proto.pyatdl.Folder.extensionsBinary, proto.pyatdl.Folder.prototype.getExtension);
};


/**
 * optional Common common = 1;
 * @return {?proto.pyatdl.Common}
 */
proto.pyatdl.Folder.prototype.getCommon = function() {
  return /** @type{?proto.pyatdl.Common} */ (
    jspb.Message.getWrapperField(this, proto.pyatdl.Common, 1));
};


/**
 * @param {?proto.pyatdl.Common|undefined} value
 * @return {!proto.pyatdl.Folder} returns this
*/
proto.pyatdl.Folder.prototype.setCommon = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pyatdl.Folder} returns this
 */
proto.pyatdl.Folder.prototype.clearCommon = function() {
  return this.setCommon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.Folder.prototype.hasCommon = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Folder folders = 2;
 * @return {!Array<!proto.pyatdl.Folder>}
 */
proto.pyatdl.Folder.prototype.getFoldersList = function() {
  return /** @type{!Array<!proto.pyatdl.Folder>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pyatdl.Folder, 2));
};


/**
 * @param {!Array<!proto.pyatdl.Folder>} value
 * @return {!proto.pyatdl.Folder} returns this
*/
proto.pyatdl.Folder.prototype.setFoldersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.pyatdl.Folder=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pyatdl.Folder}
 */
proto.pyatdl.Folder.prototype.addFolders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.pyatdl.Folder, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pyatdl.Folder} returns this
 */
proto.pyatdl.Folder.prototype.clearFoldersList = function() {
  return this.setFoldersList([]);
};


/**
 * repeated Project projects = 3;
 * @return {!Array<!proto.pyatdl.Project>}
 */
proto.pyatdl.Folder.prototype.getProjectsList = function() {
  return /** @type{!Array<!proto.pyatdl.Project>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pyatdl.Project, 3));
};


/**
 * @param {!Array<!proto.pyatdl.Project>} value
 * @return {!proto.pyatdl.Folder} returns this
*/
proto.pyatdl.Folder.prototype.setProjectsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.pyatdl.Project=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pyatdl.Project}
 */
proto.pyatdl.Folder.prototype.addProjects = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.pyatdl.Project, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pyatdl.Folder} returns this
 */
proto.pyatdl.Folder.prototype.clearProjectsList = function() {
  return this.setProjectsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pyatdl.ToDoList.prototype.toObject = function(opt_includeInstance) {
  return proto.pyatdl.ToDoList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pyatdl.ToDoList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pyatdl.ToDoList.toObject = function(includeInstance, msg) {
  var f, obj = {
    inbox: (f = msg.getInbox()) && proto.pyatdl.Project.toObject(includeInstance, f),
    root: (f = msg.getRoot()) && proto.pyatdl.Folder.toObject(includeInstance, f),
    ctxList: (f = msg.getCtxList()) && proto.pyatdl.ContextList.toObject(includeInstance, f),
    noteList: (f = msg.getNoteList()) && proto.pyatdl.NoteList.toObject(includeInstance, f)
  };

  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,
      proto.pyatdl.ToDoList.extensions, proto.pyatdl.ToDoList.prototype.getExtension,
      includeInstance);
  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pyatdl.ToDoList}
 */
proto.pyatdl.ToDoList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pyatdl.ToDoList;
  return proto.pyatdl.ToDoList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pyatdl.ToDoList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pyatdl.ToDoList}
 */
proto.pyatdl.ToDoList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pyatdl.Project;
      reader.readMessage(value,proto.pyatdl.Project.deserializeBinaryFromReader);
      msg.setInbox(value);
      break;
    case 2:
      var value = new proto.pyatdl.Folder;
      reader.readMessage(value,proto.pyatdl.Folder.deserializeBinaryFromReader);
      msg.setRoot(value);
      break;
    case 3:
      var value = new proto.pyatdl.ContextList;
      reader.readMessage(value,proto.pyatdl.ContextList.deserializeBinaryFromReader);
      msg.setCtxList(value);
      break;
    case 5:
      var value = new proto.pyatdl.NoteList;
      reader.readMessage(value,proto.pyatdl.NoteList.deserializeBinaryFromReader);
      msg.setNoteList(value);
      break;
    default:
      jspb.Message.readBinaryExtension(msg, reader,
        proto.pyatdl.ToDoList.extensionsBinary,
        proto.pyatdl.ToDoList.prototype.getExtension,
        proto.pyatdl.ToDoList.prototype.setExtension);
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pyatdl.ToDoList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pyatdl.ToDoList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pyatdl.ToDoList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pyatdl.ToDoList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInbox();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pyatdl.Project.serializeBinaryToWriter
    );
  }
  f = message.getRoot();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pyatdl.Folder.serializeBinaryToWriter
    );
  }
  f = message.getCtxList();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.pyatdl.ContextList.serializeBinaryToWriter
    );
  }
  f = message.getNoteList();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.pyatdl.NoteList.serializeBinaryToWriter
    );
  }
  jspb.Message.serializeBinaryExtensions(message, writer,
    proto.pyatdl.ToDoList.extensionsBinary, proto.pyatdl.ToDoList.prototype.getExtension);
};


/**
 * optional Project inbox = 1;
 * @return {?proto.pyatdl.Project}
 */
proto.pyatdl.ToDoList.prototype.getInbox = function() {
  return /** @type{?proto.pyatdl.Project} */ (
    jspb.Message.getWrapperField(this, proto.pyatdl.Project, 1));
};


/**
 * @param {?proto.pyatdl.Project|undefined} value
 * @return {!proto.pyatdl.ToDoList} returns this
*/
proto.pyatdl.ToDoList.prototype.setInbox = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pyatdl.ToDoList} returns this
 */
proto.pyatdl.ToDoList.prototype.clearInbox = function() {
  return this.setInbox(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.ToDoList.prototype.hasInbox = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Folder root = 2;
 * @return {?proto.pyatdl.Folder}
 */
proto.pyatdl.ToDoList.prototype.getRoot = function() {
  return /** @type{?proto.pyatdl.Folder} */ (
    jspb.Message.getWrapperField(this, proto.pyatdl.Folder, 2));
};


/**
 * @param {?proto.pyatdl.Folder|undefined} value
 * @return {!proto.pyatdl.ToDoList} returns this
*/
proto.pyatdl.ToDoList.prototype.setRoot = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pyatdl.ToDoList} returns this
 */
proto.pyatdl.ToDoList.prototype.clearRoot = function() {
  return this.setRoot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.ToDoList.prototype.hasRoot = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ContextList ctx_list = 3;
 * @return {?proto.pyatdl.ContextList}
 */
proto.pyatdl.ToDoList.prototype.getCtxList = function() {
  return /** @type{?proto.pyatdl.ContextList} */ (
    jspb.Message.getWrapperField(this, proto.pyatdl.ContextList, 3));
};


/**
 * @param {?proto.pyatdl.ContextList|undefined} value
 * @return {!proto.pyatdl.ToDoList} returns this
*/
proto.pyatdl.ToDoList.prototype.setCtxList = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pyatdl.ToDoList} returns this
 */
proto.pyatdl.ToDoList.prototype.clearCtxList = function() {
  return this.setCtxList(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.ToDoList.prototype.hasCtxList = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional NoteList note_list = 5;
 * @return {?proto.pyatdl.NoteList}
 */
proto.pyatdl.ToDoList.prototype.getNoteList = function() {
  return /** @type{?proto.pyatdl.NoteList} */ (
    jspb.Message.getWrapperField(this, proto.pyatdl.NoteList, 5));
};


/**
 * @param {?proto.pyatdl.NoteList|undefined} value
 * @return {!proto.pyatdl.ToDoList} returns this
*/
proto.pyatdl.ToDoList.prototype.setNoteList = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pyatdl.ToDoList} returns this
 */
proto.pyatdl.ToDoList.prototype.clearNoteList = function() {
  return this.setNoteList(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pyatdl.ToDoList.prototype.hasNoteList = function() {
  return jspb.Message.getField(this, 5) != null;
};


goog.object.extend(exports, proto.pyatdl);
